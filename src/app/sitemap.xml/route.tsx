//this is daynamic code for sitemap.xml file     




// import { NextRequest, NextResponse } from "next/server";
// import * as cheerio from "cheerio";

// export async function GET(req: NextRequest): Promise<NextResponse> {
//     const websiteUrl = "https://labxrepair.com.au/";
//     let fetchedUrls: string[] = [];

//     try {
        
//         const response = await fetch(websiteUrl);
//         const html = await response.text();
//         const $ = cheerio.load(html);

       
//         fetchedUrls = $("a")
//             .map((_, link) => $(link).attr("href"))
//             .get()
//             .filter((url) => url) 
//             .map((url) => url.startsWith("/") ? `${websiteUrl}${url.replace(/^\/+/, "")}` : url) 
//             .filter((url) => url.startsWith(websiteUrl)) 
//             .filter((value, index, self) => self.indexOf(value) === index); 

//     } catch (error) {
//         console.error("Error fetching URLs:", error);
//     }


//     if (!fetchedUrls.includes(websiteUrl)) {
//         fetchedUrls.unshift(websiteUrl);
//     }

//     const lastMod = new Date().toISOString();


//     const xmlSitemap = `<?xml version="1.0" encoding="UTF-8"?>
//     <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
//         ${fetchedUrls
//             .map((url) => `<url><loc>${url}</loc><lastmod>${lastMod}</lastmod></url>`)
//             .join("\n")}
//     </urlset>`;

  
//     const htmlSitemap = `
//     <!DOCTYPE html>
//     <html lang="en">
//     <head>
//         <meta charset="UTF-8">
//         <meta name="viewport" content="width=device-width, initial-scale=1.0">
//         <title>XML Sitemap</title>
//         <style>
//             body { font-family: Arial, sans-serif; margin: 40px; }
//             h1 { color: #333; }
//             table { width: 100%; border-collapse: collapse; margin-top: 20px; }
//             th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
//             th { background-color: #f4f4f4; }
//             a { text-decoration: none; color: #0073e6; }
//             a:hover { text-decoration: underline; }
//         </style>
//     </head>
//     <body>
//         <h1>XML Sitemap</h1>
//         <p>Generated by <strong><a href="https://base2brand.com/" target="_blank">Base2Brand</a></strong>, this is an XML Sitemap, meant for consumption by search engines.</p>
//         <p>This XML Sitemap contains ${fetchedUrls.length} URLs.</p>
//         <table>
//             <tr>
//                 <th>URL</th>
//                 <th>Last Modified</th>
//             </tr>
//             ${fetchedUrls
//                 .map(
//                     (url) => `
//             <tr>
//                 <td><a href="${url}" target="_blank">${url}</a></td>
//                 <td>${lastMod}</td>
//             </tr>
//             `
//                 )
//                 .join("")}
//         </table>
//     </body>
//     </html>
//     `;

//     const acceptHeader = req.headers.get("accept");
//     const isBrowser = acceptHeader?.includes("text/html");

//     return new NextResponse(isBrowser ? htmlSitemap : xmlSitemap, {
//         headers: { "Content-Type": isBrowser ? "text/html" : "application/xml" },
//     });
// }








// bottomm code status or daynamic

import { NextRequest, NextResponse } from "next/server";
import * as cheerio from "cheerio";

export async function GET(req: NextRequest): Promise<NextResponse> {
    const websiteUrl = "https://labxrepair.com.au/";
    let fetchedUrls: string[] = [];

    try {
 
        const response = await fetch(websiteUrl);
        const html = await response.text();
        const $ = cheerio.load(html);

        fetchedUrls = $("a")
            .map((_, link) => $(link).attr("href") || "")
            .get()
            .filter((url: string) => url.trim().length > 0) 
            .map((url: string) => url.startsWith("/") ? `${websiteUrl}${url.replace(/^\/+/, "")}` : url) 
            .filter((url: string) => url.startsWith(websiteUrl)); 

    } catch (error) {
        console.error("Error fetching URLs:", error);
    }


    const manualUrls: string[] = [
        "https://labxrepair.com.au/expert-motherboard-repair",
        "https://labxrepair.com.au/beginner-phone-repair-course",
        "https://labxrepair.com.au/advanced-motherboard",
        "https://labxrepair.com.au/master-motherboard-repair",
        "https://labxrepair.com.au/professional-phone-screen"
    ];

  
    fetchedUrls = Array.from(new Set([...fetchedUrls, ...manualUrls]));

   
    if (!fetchedUrls.includes(websiteUrl)) {
        fetchedUrls.unshift(websiteUrl);
    }

    const lastMod: string = new Date().toISOString();


    const xmlSitemap: string = `<?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
        ${fetchedUrls
            .map((url: string) => `<url><loc>${url}</loc><lastmod>${lastMod}</lastmod></url>`)
            .join("\n")}
    </urlset>`;

  
    const htmlSitemap: string = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>XML Sitemap</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            h1 { color: #333; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
            th { background-color: #f4f4f4; }
            a { text-decoration: none; color: #0073e6; }
            a:hover { text-decoration: underline; }
        </style>
    </head>
    <body>
        <h1>XML Sitemap</h1>
        <p>Generated by <strong><a href="https://base2brand.com/" target="_blank">Base2Brand</a></strong>, this is an XML Sitemap, meant for consumption by search engines.</p>
        <p>This XML Sitemap contains ${fetchedUrls.length} URLs.</p>
        <table>
            <tr>
                <th>URL</th>
                <th>Last Modified</th>
            </tr>
            ${fetchedUrls
                .map((url: string) => `
            <tr>
                <td><a href="${url}" target="_blank">${url}</a></td>
                <td>${lastMod}</td>
            </tr>
            `)
                .join("")}
        </table>
    </body>
    </html>
    `;

   
    const acceptHeader: string | null = req.headers.get("accept");
    const isBrowser: boolean = acceptHeader?.includes("text/html") ?? false;

    return new NextResponse(isBrowser ? htmlSitemap : xmlSitemap, {
        headers: { "Content-Type": isBrowser ? "text/html" : "application/xml" },
    });
}
